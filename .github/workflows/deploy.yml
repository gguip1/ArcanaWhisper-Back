name: Deploy to AWS EC2

on:
  push:
    branches: [main]

env:
  AWS_REGION: "ap-northeast-2"
  ECR_REPOSITORY: "gguip-github-io-ecr"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # - name: Build and push Docker image
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #   run: |
      #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{github.sha}} .
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{github.sha}}

      - name: Deploy to EC2 using SSM
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          aws ssm send-command \
              --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
              --document-name "AWS-RunShellScript" \
              --parameters '{
                  "commands": [
                      "docker stop gguip-github-io-backend || true",
                      "docker rm gguip-github-io-backend || true",
                      "aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}",
                      "docker run -d --name gguip-github-io-backend -p 8000:8000 $ECR_REGISTRY/$ECR_REPOSITORY:${{github.sha}}"
                  ]
              }'
